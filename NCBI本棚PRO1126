import os
import pandas as pd
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import tkinter as tk
from tkinter import messagebox


def generate_unique_filename(directory, filename):
    """
    保存先ディレクトリ内で重複しないファイル名を生成する。

    Args:
        directory (str): 保存先ディレクトリ。
        filename (str): 元のファイル名。

    Returns:
        str: 重複しないファイル名。
    """
    base, ext = os.path.splitext(filename)
    counter = 1
    unique_filename = filename

    while os.path.exists(os.path.join(directory, unique_filename)):
        unique_filename = f"{base}({counter}){ext}"
        counter += 1

    return unique_filename


def save_with_retry(dataframe, output_file_path, max_retries=3):
    """
    データフレームを指定ファイルパスに保存し、失敗した場合はリトライを試みる。

    Args:
        dataframe (pd.DataFrame): 保存するデータフレーム。
        output_file_path (str): 保存先のファイルパス。
        max_retries (int): 最大リトライ回数（デフォルト3回）。

    Returns:
        bool: 保存に成功した場合はTrue、全て失敗した場合はFalse。
    """
    for attempt in range(1, max_retries + 1):
        try:
            dataframe.to_excel(output_file_path, index=False, engine="openpyxl")
            return True  # 保存成功
        except Exception as e:
            if attempt < max_retries:
                print(
                    f"保存に失敗しました。{attempt}/{max_retries}回目のリトライを実行します...: {e}"
                )
                time.sleep(1)  # 少し待機してから再試行
            else:
                print(f"保存に失敗しました。最終エラー: {e}")
                return False  # リトライ失敗

    return False  # ここには到達しないはずだが保険として


def start_scraping():
    # GUIからの入力を取得
    search_term = search_term_entry.get()
    try:
        max_iterations = int(max_iterations_entry.get())
    except ValueError:
        messagebox.showerror("エラー", "繰り返し回数を数値で入力してください！")
        return

    # SeleniumのWebDriverをSeleniumManagerにより設定
    try:
        driver = webdriver.Chrome()  # SeleniumManagerが自動的にChromeDriverを管理
    except Exception as e:
        messagebox.showerror(
            "エラー", f"WebDriverの初期化中にエラーが発生しました: {e}"
        )
        return

    # 初期ページを開く
    url = f"https://www.ncbi.nlm.nih.gov/books/?term={search_term}"  # 検索キーワードをURLに組み込む
    driver.get(url)

    titles = []
    links = []

    current_iteration = 0

    while current_iteration < max_iterations:
        # ページの内容をBeautifulSoupで解析
        soup = BeautifulSoup(driver.page_source, "html.parser")
        booklists = soup.find_all("p", class_="title")  # p.title を全て取得

        # 書籍タイトルとリンクを取得
        for booklist in booklists:
            a_tag = booklist.find("a", href=True)
            if a_tag:
                titles.append(
                    a_tag.get_text().strip()
                )  # タイトルを取得してリストに追加
                links.append(
                    "https://www.ncbi.nlm.nih.gov" + a_tag["href"]
                )  # フルリンクを作成してリストに追加

        try:
            # "Next" ボタンが表示されるまでスクロール
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)  # スクロール後の読み込みを待つ

            # "Next" ボタンがクリック可能になるまで待つ
            next_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CLASS_NAME, "active.page_link.next"))
            )
            next_button.click()
            current_iteration += 1
        except Exception as e:
            # "Next" ボタンが見つからない場合はループを終了
            messagebox.showwarning("警告", f"次のページに移動できませんでした: {e}")
            break

    # ドライバーを閉じる
    driver.quit()

    # タイトルとリンクの長さを一致させる
    max_length = max(len(titles), len(links))
    titles.extend([""] * (max_length - len(titles)))
    links.extend([""] * (max_length - len(links)))

    # 解析したデータを辞書に保存
    data = {"Title": titles, "Link": links}

    # データフレームを作成
    df = pd.DataFrame(data)

    # 出力ファイルパスをユーザーのドキュメントフォルダに設定
    output_directory = os.path.join(os.path.expanduser("~"), "Documents")
    os.makedirs(output_directory, exist_ok=True)

    base_filename = "ncbi_result_info.xlsx"
    unique_filename = generate_unique_filename(output_directory, base_filename)
    output_file_path = os.path.join(output_directory, unique_filename)

    # 保存処理（リトライ機能付き）
    if save_with_retry(df, output_file_path):
        messagebox.showinfo(
            "完了", f"Excelファイル '{output_file_path}' に保存されました！"
        )
    else:
        messagebox.showerror(
            "エラー", f"ファイルの保存に失敗しました。保存先: '{output_file_path}'"
        )


# Tkinterを使ってGUIを構築
root = tk.Tk()
root.title("NCBI 本棚のデータスクレイピング♪")

# ラベルと入力フィールド
tk.Label(root, text="検索ワードを入力してね！:").grid(row=0, column=0, padx=10, pady=5)
search_term_entry = tk.Entry(root, width=30)
search_term_entry.grid(row=0, column=1, padx=10, pady=5)

tk.Label(root, text="繰り返しの回数を指定してね！:").grid(
    row=1, column=0, padx=10, pady=5
)
max_iterations_entry = tk.Entry(root, width=30)
max_iterations_entry.grid(row=1, column=1, padx=10, pady=5)

# 実行ボタン
tk.Button(root, text="実行", command=start_scraping).grid(row=2, columnspan=2, pady=10)

root.mainloop()
